$date
	Fri Jun 27 01:47:55 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module ALU_tb $end
$var wire 1 ! Zero $end
$var wire 32 " Result [31:0] $end
$var wire 1 # OverFlow $end
$var wire 1 $ Negative $end
$var wire 1 % Carry $end
$var reg 32 & A [31:0] $end
$var reg 3 ' ALUControl [2:0] $end
$var reg 32 ( B [31:0] $end
$scope module uut $end
$var wire 32 ) A [31:0] $end
$var wire 3 * ALUControl [2:0] $end
$var wire 32 + B [31:0] $end
$var wire 1 % Carry $end
$var wire 1 # OverFlow $end
$var wire 1 ! Zero $end
$var wire 32 , Sum [31:0] $end
$var wire 32 - Result [31:0] $end
$var wire 1 $ Negative $end
$var wire 1 . Cout $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
0.
b1000 -
b1000 ,
b11 +
b0 *
b101 )
b11 (
b0 '
b101 &
0%
0$
0#
b1000 "
0!
$end
#10000
b101 "
b101 -
b101 ,
b10 (
b10 +
b111 &
b111 )
b1 '
b1 *
#20000
1!
b11111111111111111111111111111111 ,
b0 "
b0 -
b1111000011110000111100001111 (
b1111000011110000111100001111 +
b11110000111100001111000011110000 &
b11110000111100001111000011110000 )
b10 '
b10 *
#30000
b1010101010101010101010101010101 ,
1$
0!
b11111111111111111111111111111111 "
b11111111111111111111111111111111 -
b1010101010101010101010101010101 (
b1010101010101010101010101010101 +
b10101010101010101010101010101010 &
b10101010101010101010101010101010 )
b11 '
b11 *
#40000
0$
0!
b1 "
b1 -
0#
1%
b11111111111111111111111111111111 ,
1.
b10 (
b10 +
b1 &
b1 )
b101 '
b101 *
#50000
1%
b11111111111111111111111111111111 ,
1.
b11111111111111111111111111111111 (
b11111111111111111111111111111111 +
b11111111111111111111111111111110 &
b11111111111111111111111111111110 )
#60000
0%
1#
0.
b10000000000000000000000000000000 ,
1$
b10000000000000000000000000000000 "
b10000000000000000000000000000000 -
b1 (
b1 +
b1111111111111111111111111111111 &
b1111111111111111111111111111111 )
b0 '
b0 *
#70000
0$
b1111111111111111111111111111111 "
b1111111111111111111111111111111 -
1#
b1111111111111111111111111111111 ,
b10000000000000000000000000000000 &
b10000000000000000000000000000000 )
b1 '
b1 *
#80000
